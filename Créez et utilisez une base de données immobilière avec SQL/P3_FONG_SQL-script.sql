CREATE DATABASE `p3_fong`;
-- puis import de MySQL Script generated by MySQL Workbench

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------
-- MySQL Script generated by MySQL Workbench
-- Tue Mar 30 11:17:47 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema P3_FONG
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema P3_FONG
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `P3_FONG` DEFAULT CHARACTER SET utf8 ;
USE `P3_FONG` ;

-- -----------------------------------------------------
-- Table `P3_FONG`.`TypeLocal`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `P3_FONG`.`TypeLocal` (
  `code_type_local` TINYINT(1) NOT NULL,
  `type_local` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`code_type_local`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `P3_FONG`.`Commune`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `P3_FONG`.`Commune` (
  `code_postal` MEDIUMINT(5) NOT NULL,
  `commune` VARCHAR(40) NOT NULL,
  `code_departement` VARCHAR(3) NOT NULL,
  PRIMARY KEY (`code_postal`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `P3_FONG`.`Adresse`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `P3_FONG`.`Adresse` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `no_voie` SMALLINT(5) NULL,
  `type_voie` VARCHAR(4) NULL,
  `voie` VARCHAR(40) NOT NULL,
  `code_postal` MEDIUMINT(5) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_code_postal_idx` (`code_postal` ASC) VISIBLE,
  CONSTRAINT `fk_code_postal`
    FOREIGN KEY (`code_postal`)
    REFERENCES `P3_FONG`.`Commune` (`code_postal`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `P3_FONG`.`BienImmobilier`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `P3_FONG`.`BienImmobilier` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code_type_local` TINYINT(1) NOT NULL,
  `adresse_id` INT NOT NULL,
  `date_mutation` DATE NOT NULL,
  `valeur_fonciere` INT,
  `surface_reelle_bati` SMALLINT(3) NOT NULL,
  `nb_piece` TINYINT(2) NOT NULL,
  `surface_carrez` FLOAT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_TL_type_local_idx` (`code_type_local` ASC) VISIBLE,
  INDEX `fk_A_id_idx` (`adresse_id` ASC) VISIBLE,
  CONSTRAINT `fk_TL_type_local`
    FOREIGN KEY (`code_type_local`)
    REFERENCES `P3_FONG`.`TypeLocal` (`code_type_local`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_A_id`
    FOREIGN KEY (`adresse_id`)
    REFERENCES `P3_FONG`.`Adresse` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------------------------------------------------------------------------------------------------------

LOAD DATA INFILE 'typelocal.csv'
INTO TABLE Typelocal
FIELDS TERMINATED BY ';' ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
(code_type_local, type_local);

LOAD DATA INFILE 'commune.csv'
INTO TABLE Commune
FIELDS TERMINATED BY ';' ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
(code_postal, commune, code_departement);

LOAD DATA INFILE 'adresse.csv'
INTO TABLE Adresse
FIELDS TERMINATED BY ';' ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
(id, no_voie, type_voie, voie, code_postal);

LOAD DATA INFILE 'bienimmobilier.csv'
INTO TABLE Bienimmobilier
FIELDS TERMINATED BY ';' ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
(id, code_type_local, adresse_id, date_mutation, valeur_fonciere, surface_reelle_bati, nb_piece, surface_carrez);

-- ------------------------------------------------------------------------------------------
-- 1. Nombre total d’appartements vendus au 1er semestre 2020.
-- ------------------------------------------------------------------------------------------
SELECT COUNT(id) FROM Bienimmobilier B
JOIN Typelocal T ON B.code_type_local = T.code_type_local
WHERE T.type_local = "appartement";

-- ------------------------------------------------------------------------------------------
-- 2. Proportion des ventes d’appartements par le nombre de pièces.
-- ------------------------------------------------------------------------------------------
SELECT nb_piece, 
	round(COUNT(id)/(
		SELECT COUNT(id) 
		FROM Bienimmobilier B
		JOIN Typelocal T ON B.code_type_local = T.code_type_local
		WHERE T.type_local = "appartement")*100,2) AS proportion 
FROM Bienimmobilier B
JOIN Typelocal T ON B.code_type_local = T.code_type_local
WHERE T.type_local = "appartement"
GROUP BY nb_piece
ORDER BY nb_piece;

-- ------------------------------------------------------------------------------------------
-- 3. Liste des 10 départements où le prix du mètre carré est le plus élevé.
-- revoir les résultats, données?
-- ------------------------------------------------------------------------------------------
SELECT C.code_departement, AVG(valeur_fonciere/surface_carrez) AS prix_m²  FROM Bienimmobilier B
JOIN Adresse A ON A.id = B.adresse_id
JOIN Commune C ON C.code_postal = A.code_postal
WHERE surface_carrez!=0
GROUP BY code_departement
ORDER BY prix_m² DESC
LIMIT 10;

-- ------------------------------------------------------------------------------------------
-- 4. Prix moyen du mètre carré d’une maison en Île-de-France.
-- ------------------------------------------------------------------------------------------
WITH departement AS(
	SELECT id, A.code_postal, C.commune, C.code_departement 
	FROM Adresse A
    JOIN Commune C ON A.code_postal = C.code_postal)
SELECT AVG(valeur_fonciere/surface_carrez) AS prix_m²  FROM Bienimmobilier B
JOIN departement D ON D.id = B.adresse_id
JOIN Typelocal T ON B.code_type_local = T.code_type_local
WHERE code_departement IN (75,77,78,91,92,93,94,95)
AND type_local = "maison" ;

-- ------------------------------------------------------------------------------------------
-- 5. Liste des 10 appartements les plus chers avec le département et le nombre de mètres carrés
-- ------------------------------------------------------------------------------------------
WITH departement AS(
	SELECT id, A.code_postal, C.commune, C.code_departement 
	FROM Adresse A
    JOIN Commune C ON A.code_postal = C.code_postal)
SELECT B.id, D.code_departement AS departement, surface_carrez AS m², valeur_fonciere FROM Bienimmobilier B
JOIN departement D ON D.id = B.adresse_id
JOIN Typelocal T ON B.code_type_local = T.code_type_local
WHERE type_local = "appartement"
ORDER BY valeur_fonciere DESC
LIMIT 10;

-- ------------------------------------------------------------------------------------------
-- 6. Taux d’évolution du nombre de ventes entre le premier et le deuxième trimestres de 2020.
-- ------------------------------------------------------------------------------------------
WITH departement AS(
	SELECT id, A.code_postal, C.commune, C.code_departement 
	FROM Adresse A
    JOIN Commune C ON A.code_postal = C.code_postal),
	vente_premier_trimestre AS(
	SELECT D.commune AS commune, count(B.id) AS nb_vente_trim_1 
    FROM Bienimmobilier B
	JOIN departement D ON D.id = B.adresse_id
	WHERE MONTH(date_mutation) < 4
	GROUP BY commune),
	vente_deuxieme_trimestre AS(
	SELECT D.commune AS commune, count(B.id) AS nb_vente_trim_2 
    FROM Bienimmobilier B
	JOIN departement D ON D.id = B.adresse_id
	WHERE MONTH(date_mutation) BETWEEN 4 AND 6
	GROUP BY commune)
SELECT (((SELECT SUM(nb_vente_trim_2) FROM vente_deuxieme_trimestre)-SUM(nb_vente_trim_1))/SUM(nb_vente_trim_1))*100 AS "Taux d'évolution entre 1er et 2eme trim" 
FROM vente_premier_trimestre PT;
-- ------------------------------------------------------------------------------------------
-- 7. Liste des communes où le taux d’évolution des ventes est supérieur à 20 % entre le premier et le second semestre de 2020.
-- Erreur dans l'énoncé car la BDD est sur le 1er semestre seulement, exercice effectué sur le trimestre 1 et 2
-- Taux d'évolution des ventes => nombre de ventes
-- ------------------------------------------------------------------------------------------
WITH departement AS(
	SELECT id, A.code_postal, C.commune, C.code_departement 
	FROM Adresse A
    JOIN Commune C ON A.code_postal = C.code_postal),
	vente_premier_trimestre AS(
	SELECT D.commune AS commune, count(B.id) AS nb_vente_trim_1 
    FROM Bienimmobilier B
	JOIN departement D ON D.id = B.adresse_id
	WHERE MONTH(date_mutation) < 4
	GROUP BY commune),
	vente_deuxieme_trimestre AS(
	SELECT D.commune AS commune, count(B.id) AS nb_vente_trim_2 
    FROM Bienimmobilier B
	JOIN departement D ON D.id = B.adresse_id
	WHERE MONTH(date_mutation) BETWEEN 4 AND 6
	GROUP BY commune)
SELECT vpt.commune, nb_vente_trim_1 AS "T1", nb_vente_trim_2 AS "T2", 
(nb_vente_trim_2-nb_vente_trim_1)/nb_vente_trim_1*100 AS taux 
FROM vente_premier_trimestre vpt
INNER JOIN vente_deuxieme_trimestre ON vente_deuxieme_trimestre.commune = vpt.commune
WHERE (nb_vente_trim_2-nb_vente_trim_1)/nb_vente_trim_1*100 > 20
GROUP BY vpt.commune;

-- ------------------------------------------------------------------------------------------
-- 8. Différence en pourcentage du prix au mètre carré entre un appartement de 2 pièces et un appartement de 3 pièces.
-- ------------------------------------------------------------------------------------------
WITH appart2 AS(
SELECT AVG(valeur_fonciere/surface_carrez) AS T2_prix_m² FROM Bienimmobilier B
JOIN Typelocal T ON B.code_type_local = T.code_type_local
WHERE T.type_local = "appartement"
AND nb_piece = 2), 
appart3 AS(
SELECT AVG(valeur_fonciere/surface_carrez) AS T3_prix_m² FROM Bienimmobilier B
JOIN Typelocal T ON B.code_type_local = T.code_type_local
WHERE T.type_local = "appartement"
AND nb_piece = 3)
SELECT (T3_prix_m²-T2_prix_m²)/T2_prix_m²*100 FROM appart2, appart3;

-- ------------------------------------------------------------------------------------------
-- 9. Taux d’appartements qui ont été vendus à un prix du mètre carré deux fois plus élevé que le prix du mètre carré moyen du département.
-- ------------------------------------------------------------------------------------------
-- Prix moyen par m² selon département
WITH PMD AS(
	SELECT C.code_departement AS cd, AVG(valeur_fonciere/surface_carrez) AS PM_dep FROM Bienimmobilier B
	JOIN Adresse A ON A.id = B.adresse_id
	JOIN Commune C ON C.code_postal = A.code_postal
	GROUP BY C.code_departement),
-- Liste des apparts qui ont été vendus à un prix du m² deux fois plus élevé que le prix m² moyen du département
	AP AS(
	SELECT B.id AS id, valeur_fonciere/surface_carrez AS prix_m², PM.cd, PM_dep FROM Bienimmobilier B
	JOIN Adresse A ON A.id = B.adresse_id
	JOIN Commune C ON C.code_postal = A.code_postal
	JOIN PMD PM ON C.code_departement = PM.cd
	JOIN Typelocal T ON B.code_type_local = T.code_type_local
	WHERE (valeur_fonciere/surface_carrez)/ PM_dep >2
    AND type_local = "appartement")
  
SELECT round(COUNT(AP.id)/(
		SELECT COUNT(id) 
		FROM Bienimmobilier B
		JOIN Typelocal T ON B.code_type_local = T.code_type_local
		WHERE T.type_local = "appartement")
        *100,2) AS taux  
FROM AP;
-- ------------------------------------------------------------------------------------------
-- 10. Donnez les moyennes de valeurs foncières pour le top 20 des communes.
-- ------------------------------------------------------------------------------------------
WITH departement AS(
	SELECT id, A.code_postal, C.commune, C.code_departement 
	FROM Adresse A
    JOIN Commune C ON A.code_postal = C.code_postal)
SELECT D.commune AS commune, COUNT(B.id) AS nb_ventes, AVG(B.valeur_fonciere) AS moyenne_valeur_foncière, rank() OVER(ORDER BY COUNT(B.id) DESC) AS rank_ 
FROM Bienimmobilier B
JOIN departement D ON D.id = B.adresse_id
GROUP BY commune;

WITH departement AS(
	SELECT id, A.code_postal, C.commune, C.code_departement 
	FROM Adresse A
    JOIN Commune C ON A.code_postal = C.code_postal)
SELECT * FROM(
	SELECT D.commune AS commune, COUNT(B.id) AS nb_ventes, AVG(B.valeur_fonciere) AS moyenne_valeur_foncière, rank() OVER(ORDER BY AVG(B.valeur_fonciere) DESC) AS rank_ 
	FROM Bienimmobilier B
	JOIN departement D ON D.id = B.adresse_id
	GROUP BY commune) T
WHERE T.rank_ < 21;